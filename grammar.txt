GRAMMAR:


|------------------------------------------------- Comment ---------------------------------------------|

C -> ;Comment
Comment -> cmnt | ^
|------------------------------------------- Arithematic Expressions -----------------------------------|

E -> RE'
E' -> +RE' | -RE' | ^
R -> TR'
R' -> *TR' | /TR' | %TR' | ^
T -> id|num|(E)

Translation Scheme:

E -> R	{E'.i = R.v}
     E'	{E.v = E'.s}
		{fout << E.v << endl}
E' -> +	
	R	{E'1.i = E'.i + R.v}
	E'1	{E'.s = E'1.s}

E' -> -
	R	{E'2.i = E'.i - R.v}
	E'2	{E'.s = E'2.s}

E' -> ^	{E'.s = E'.i}

R -> T	{R'.i = T.v}
     R'	{R.v = R'.s}

R' -> *	
	T	{R'1.i = R'.i * T.v}
	R'1	{R'.s = R'1.s}

R' -> /
	T	{R'2.i = R'.i / T.v}
	R'2	{R'.s = R'2.s}

R' -> %
	T	{R'3.i = R'.i % T.v}
	R'3	{R'.s = R'3.s}

R' -> ^	{R'.s = R'.i}

T -> id	    {T.v = id.lex}	
T -> num	{T.v = num.lex}
T -> (E)	{T.v = E.v}

|-------------------------------------------- Function Declaration -------------------------------------|

F -> kaam Func@FuncType (P) karo Stmts W kaam khatam
Func -> markazi | ID
FuncType -> adad | khali

|--------------------------------------------Return Statement------------------------------------------|
W -> wapas bhaijo E; Comment | ^

Translation Scheme
W -> wapas bhaijo E; {fout << "ret " << E.v}
     Comment
W -> ^

|-------------------------------------- Function Paramters while declaration. -----------------------------------|

P -> ID@DataType A | ^
A -> | ID@DataType A | ^

|-------------------------------------------------DataTypes ---------------------------------------------|

DataType -> adad

|------------------------------------- Variable Declaration / Initialization ---------------------------|

V -> rakho ID@DataType B Comment
B -> ASSIGN O | ;
O -> E; | FC


// For simple Initialization
Y -> ASSIGN O
K -> ID Y Comment


Translation Scheme:

V -> rakho ID@DataType B { if(B.v != ^) {
                               fout << ID.lex << " " << B.v << endl;
                           }
                         }
     Comment
B -> ASSIGN O {B.v = "= " + O.v}
B -> ;  {B.v = ^}
O -> E; {O.v = E.v}
O -> FC {O.v = FC.v}

// For simple Initialization
Y -> ASSIGN O {Y.v = O.v}

K -> ID Y { if(Y.v != ^){
                fout << ID.lex << " " << Y.v << endl;
            }
          } 
     Comment
 



|--------------------------------------------- Function Call --------------------------------------|

FC -> chalao ID(Z); {  var = new Temp();
                       fout << "call " << ID.lex << Z.c << " " << var 
                       FC.v = var
                    }
      Comment
Z -> E { fout << "param " << E.v << endl;}
     U {Z.c = U.c}

Z -> ^ {Z.c = 0}

U -> | 
     E { fout << "param " << E.v << endl;}
     U {U.c = U1.c + 1}

U -> ^ {U.c = 1}


|--------------------------------------------- Print  ---------------------------------------------|

print -> dekhao << G H ;Comment
H -> << G H | ^
G -> str | E	


Translation Scheme:

print -> dekhao
	   << 
	   G
	   H 
	   ;Comment
H -> << 
     G
     H
H -> ^
G -> str 	{fout << str.lex << endl}
G -> E	    {fout << E.v << endl}   




|--------------------------------------------- Input ---------------------------------------------|


input -> lo H >> Var I;Comment
I -> >> Var I | ^
Var  -> ID J
J -> @DataType | ^

-- Translation Scheme --:

input -> lo H >> Var I;Comment
I -> >> Var I | ^
Var  -> ID {fout << "in " << ID.lex << endl;} 
        J
J -> @DataType | ^

|--------------------------------------------- Conditionals  ---------------------------------------------|

Conditional -> agar (E RO E) to phir karo Stmts ElseIf Else bas karo
ElseIf -> warna agar (E RO E) to phir Stmts ElseIf | ^
Else -> warna phir Stmts | ^

Translation Scheme:

Conditional -> agar 
		   (E RO E)	{BE.t=n;
				 print(if E.v RO.lex E.v goto __); ++n;
				 BE.f=n;
				 print(goto __); ++n;}
		   to
		   phir 
		   karo	{fillBlank(BE.t,n)} 
		   Stmts	{S.nxt=n; print(goto __); ++n;}
		   ElseIf 	{fillBlank(BE.f,n)}
		   Else 	{fillBlank(S.nxt,n)}
		   bas 
		   karo
ElseIf -> warna 
	    agar 
	    (E RO E) {BE.t=n;
			  print(if E.v RO.lex E.v goto __); ++n;
			  BE.f=n;
			  print(goto __); ++n;}
	    to 
	    phir	{fillBlank(BE.t,n)}
	    Stmts 	{S.nxt=n; print(goto __); ++n;}
	    ElseIf	{fillBlank(BE.f,n)}
ElseIf -> ^
Else -> warna 
	  phir 
	  Stmts 
Else -> ^



|--------------------------------------------- While Loop  ---------------------------------------------|

while -> jab tak (E RO E) karo Stmts bas karo

Translation Scheme:

while -> jab 
	   tak 
	   (E RO E)	{BE.t=n;
			 print(if E.v RO.lex E.v goto __); ++n;
			 BE.f=n;
			 print(goto __); ++n;}
	   karo 	{fillBlank(BE.t,n)}
	   Stmts 	{print(goto BE.t); ++n;
			 fillBlank(BE.f,n);}
	   bas 
	   karo


|--------------------------------------------- Statements  ---------------------------------------------|
Stmts -> Stmt Stmts | ^
Stmt -> C  | V | FC | print | input | Conditional | while

|--------------------------------------------- Starting Point  ---------------------------------------------|
Start -> F Start | C Start | ^



Regular Expressions used in GRAMMAR