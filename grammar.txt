GRAMMAR:


|------------------------------------------------- Comment ---------------------------------------------|

C -> ;Comment
Comment -> cmnt | ^
|------------------------------------------- Arithematic Expressions -----------------------------------|

E -> RE'
E' -> +RE' | -RE' | ^
R -> TR'
R' -> *TR' | /TR' | %TR' | ^
T -> id|num|(E)

-
|-------------------------------------------- Function Declaration -------------------------------------|

F -> kaam Func@FuncType (P) karo Stmts W kaam khatam
Func -> markazi | ID
FuncType -> adad | khali

|--------------------------------------------Return Statement------------------------------------------|
W -> wapas bhaijo E; Comment | ^

Translation Scheme
W -> wapas bhaijo E; {fout << "ret " << E.v}
     Comment
W -> ^

|-------------------------------------- Function Paramters while declaration. -----------------------------------|

P -> ID@DataType A | ^
A -> | ID@DataType A | ^

|-------------------------------------------------DataTypes ---------------------------------------------|

DataType -> adad

|------------------------------------- Variable Declaration / Initialization ---------------------------|

V -> rakho ID@DataType B Comment
B -> ASSIGN O | ;
O -> E; | FC

Y -> ASSIGN O
// For simple Initialization
K -> ID Y Comment


Translation Scheme:

V -> rakho ID@DataType B { if(B.v != ^) {
                               fout << ID.lex << " " << B.v << endl;
                           }
                         }
     Comment
B -> ASSIGN O {B.v = "= " + O.v}
B -> ;  {B.v = ^}
O -> E; {O.v = E.v}
O -> FC {O.v = FC.v}

// For simple Initialization
Y -> ASSIGN O {Y.v = O.v}

K -> ID Y { if(Y.v != ^){
                fout << ID.lex << " " << Y.v << endl;
            }
          } 
     Comment
 



|--------------------------------------------- Function Call ---------------------------------------------|

FC -> chalao ID(Z); {  var = new Temp();
                       fout << "call " << ID.lex << Z.c << " " << var 
                       FC.v = var
                    }
      Comment
Z -> E { fout << "param " << E.v << endl;}
     U {Z.c = U.c}

Z -> ^ {Z.c = 0}

U -> | 
     E { fout << "param " << E.v << endl;}
     U {Uc + U1.c + 1}

U -> ^ {U.c = 1}


|--------------------------------------------- Print  ---------------------------------------------|

print -> dekhao << G H ;Comment
H -> << G H | ^
G -> str | E

-
|--------------------------------------------- Input ---------------------------------------------|


input -> lo H >> Var I;Comment
I -> >> Var I | ^
Var  -> ID J
J -> @DataType | ^

-- Translation Scheme --:

input -> lo H >> Var I;Comment
I -> >> Var I | ^
Var  -> ID {fout << "in " << ID.lex << endl;} 
        J
J -> @DataType | ^

|--------------------------------------------- Conditionals  ---------------------------------------------|

Conditional -> agar (E RO E) to phir karo Stmts ElseIf Else bas karo
ElseIf -> warna agar (E RO E) to phir Stmts ElseIf | ^
Else -> warna phir Stmts | ^


|--------------------------------------------- While Loop  ---------------------------------------------|

while -> jab tak (E RO E) karo Stmts bas karo


|--------------------------------------------- Statements  ---------------------------------------------|
Stmts -> Stmt Stmts | ^
Stmt -> C  | V | FC | print | input | Conditional | while

|--------------------------------------------- Starting Point  ---------------------------------------------|
Start -> F Start | C Start | ^



Regular Expressions used in GRAMMAR